#+TODO: TODO(t) IN-PROGRESS (p) | DONE(d) CANCELLED(c)
#+PRIORITIES: 1 5 3
* Notes
** General Notes
<2023-04-10 Mon 17:13>: These are my previous notes for this Vue based app:

<2023-04-09 Sun 01:49>: App idea:
- Kitchen timer, metronome, stopwatch all in one page or app
- It could be based in Vue.js to make it a super easy app to use to deliberately learn Vue but not make it TOO simple either to have people shrug the app idea off
- Vue Kitchen timer app where it's all peach gold pixel art themed, similar to the Mario Advance 2 stage select screen on GBA but more emphasized. Need to ask online how to create scalable pixel art in that scenario or if it's better to start with assets that are scalable in Gimp etc

** App Name Ideas
<2023-04-10 Mon 17:18>: This has to be some kind of app that incorporates the following 3 ideas:
- Stopwatch (Quick stopwatch)
- Kitchen Timer (Just like a microwave with easy to access minute panels)
- Metronome (Set the BPM, sound of the click itself, and time signature)

With this in mind, this is what I can think of:
- Times 3: A 3-in-1 timer app that incorporates a stopwatch, kitchen timer, and metronome for all of those times when you wish you had each of these available to you

Idea brainstorm:
#+begin_src text
Metronomes set the motion in pace for beautiful music to be set in the sequence of time and space.
Kitchen timers help you prepare wonderful recipes and food, and prevent ruining food
Stopwatches allow you to easily time yourself on tasks for athletic or even everyday tasks

Ideas for names: Timer, Timed, Timez, "Time To Get A Watch", Stroke, Clock Stroke, Grandfather Clock Swings,
#+end_src

<2023-04-10 Mon 19:12>: Name Ideas:
- Click, Clock, Tick
- Ticker
- Click Clock

<2023-04-10 Mon 19:19>: Final name:
- Click Clock

** Related Learning Links
Decent looking guide on how to use Rails and Vue JS:
- https://www.engineyard.com/blog/rails-and-vue-js-part-1/

Guide on how to make a Vue app for mobile:
- https://www.sam-solutions.com/blog/vue-js-mobile-development/

Guide on how to use React as a frontend, and C# (.NET) for the backend for an application:
- https://www.freecodecamp.org/news/create-a-react-app-with-a-dot-net-backend/

<2023-04-10 Mon 18:42>: I confirmed that the version of Rails I am currently using is Version 7.0.4.3 via the following command:
#+begin_src bash
sam@notestation ~/Downloads $ rails --version
Rails 7.0.4.3
#+end_src

I then found a related Rails + Vue + Vite template here from GitHub:
- https://github.com/IsraelDCastro/rails-vite-tailwindcss-template

This is great because I can just use this command to quickly build the Rails app without having to worry about making sure all the connections work so that I can just focus on learning Vue accordingly:
#+begin_src bash
rails new my_app --skip-webpack-install --skip-javascript -d <database_you_want> -m https://raw.githubusercontent.com/IsraelDCastro/rails-vite-tailwindcss-template/master/template.rb --vue
#+end_src

* Jira Tickets
** Todo
*** TODO Look into NPM packages that provide timer functionality (for counting up and down) as well as metronome and volume packages
*** TODO Make the individual buttons actually work to provide changes on screen
*** TODO Review related Vue basics and other Docs to see if there is anything advanced I can add to the application itself
<2023-04-11 Tue 19:39>: I need to check Vue.js docs page for some refreshers on its use so that I can figure out how to implement the basic page I want for this application.

<2023-04-12 Wed 21:12>: I'm in the process of watching a few Vue.js tutorials just to get a feel for it so far.

From the looks of it, it seems just like React where it is its own self contained framework where you can build out repeatable components easily. The interpolation aspect seems very similar to React, and also the whole idea of binding to a div tag for the entire application itself is just like React as well.

<2023-04-11 Tue 19:39>: I need to check Vue.js docs page for some refreshers on its use so that I can figure out how to implement the basic page I want for this application.
*** TODO Test the resulting app in different screen sizes
*** TODO Create modified buttons using gold style pixel art
<2023-04-17 Mon 15:27>: My goal for the overall look and design for this project is to emulate the Super Mario Advance 2 / Super Mario All-Stars 'peach gold' menu color scheme look. It has a really unique look, and would be really cool to apply for an app like this one.
*** TODO Research flashy looking animations that appear when each component page is loaded
<2023-04-17 Mon 15:26>: I would like to make this app look flashy when picking the various component pages, so this is an element I believe that is necessary for this project.
*** TODO Deploy the app on Render.com
** In Progress
*** IN-PROGRESS Rig the individual buttons to related Vue functions and get it working with a basic console.log statement to prove they are useable
<2023-04-26 Wed 11:20>: Now that the Figma design template is pretty much set, it is time to rig the buttons accordingly so that I can use actual JS for once in this project :)

Though I learned a lot from trying to match the wireframe, I learned that it is not easy to do this at all, but appreciate a good design that dictates everything going forward as it made the app look way better than I intended it to.

With this in mind, I will explore the buttons themselves.

<2023-04-26 Wed 11:41>: I can easily do event handling with basic JavaScript but I am also debating if I should also explore it with how Vue does it.

I checked their Docs page on the subject, and they are just as bad as the React docs page in the sense that all of these examples have zero context behind them, meaning they leave a TON of information out and only provide small snippets, when they should really provide small self contained examples in codeblocks but with 'html', 'js' etc tabs instead:
- https://vuejs.org/guide/essentials/event-handling.html#method-handlers

I will try to see if there are any actual guides on how to actually use the 'methods' keyword in this context since their example sucks at explaining if this should be in the 'template' block or even just the 'script' block at the bottom of a particular .Vue file.

<2023-04-26 Wed 15:36>: I tried referring to this video for reference to how Vue handles the concept of 'event handling':
- #07 - Event Handling - Vue 3 Tutorial (https://www.youtube.com/watch?v=o41UaWgkf_4)

<2023-04-26 Wed 15:44>: I found this particular reference page to be helpful from the Vue docs:
- https://vuejs.org/guide/essentials/forms.html

Basically, the way Vue handles event handling is by simplifying it to the 'v-model' directive which negates any need for using ':value' or '@input' attributes on an input tag.

What I can probably do in my scenario is then add 'v-model' directives to the input tags for the 'hours', 'minutes', and 'seconds' input tags to then easily and dynamically use before the user presses the 'Start' button.

<2023-04-26 Wed 15:56>: I noticed in the Vue Docs page example's sandbox that the 'return' statement allows for the variable you are trying to create to be accessed:
- https://play.vuejs.org/#eNo9jdEKwjAMRX8l9EV90L2POvAD/IO+lDVqoetCmw6h9N/NmBuEJPeSc1PVg+i2FFS90nlMnngwEb80JwaHL1sCQzURwFm258u2AyTkkuKuACbM2b6xh9Nps9o6pEnp7ggWwThRsIyiADQNz40En3uodQ+C1nRHK8HaRyoMy3WaHYa7Uf8To0CCRvzMwWESH51n4cXvBNTd8Um1H0FuTq0=

With this in mind, I applied it to my project and it works to actively output it to a paragraph element as a test which is great.

The problem I am having currently is that the 'startTimer' function I am creating does not have access to the 'hrinput', 'mininput', and 'secinput' variables for just basic console.log statements.

<2023-04-26 Wed 16:28>: I did some further research on the topic of using 'v-model' directives in conjunction with the 'methods' section of the 'script' tag in a Vue application, and found this particular article, especially the '3. "Powerful" computed property' section to be pretty helpful:
- https://dev.to/vcpablo/vuejs-2-different-ways-to-implement-v-model-1mjf

This article linked to this particular page on the topic of using 'getters and setters' in terms of Vue:
- https://vuejs.org/guide/essentials/computed.html#basic-example

After looking at their example, it was clear why I wasn't getting any info back as I wasn't using the object orientated idea of using 'this.' to access the specific instance variable.

With this in mind, I was able to use 'this.' within the custom 'startTimer' method I created, and I am now easily seeing the values appear in console as expected.

<2023-05-01 Mon 13:59>: I did more research into this, and 'Moment' package derivatives seem like a better approach than having to deal with the 'Date' object itself as such approaches sometimes utilize Unix timestamps in weird ways to the point where you're better off just using a library that is built to handle situations like mine.

Basically, I need a date timestamp library that finds the current date time stamp, and adds to it to determine a new date timestamp in the future, and I would basically be counting down from the current date timestamp up until the new one.

'Day.js' seems to fit the bill in my opinion:
- https://day.js.org/en/

The docs pages seem pretty decent as well for the intent that I have as well, especially their '.add' method to the 'dayjs' object itself which I could just add the 'hours', 'minutes', and 'seconds' onto in order to determine the final countdown timestamp:
- https://day.js.org/docs/en/manipulate/add

I used the following page to install the 'dayjs' package from NPM as a reference:
- https://day.js.org/docs/en/installation/node-js

I also used this exact NPM command accordingly:
#+begin_src bash
npm install dayjs
#+end_src

I also referred to this related Vue workaround to include 'dayjs' taken from this StackOverflow post:
- https://stackoverflow.com/questions/66559331/how-to-properly-use-dayjs-inside-vue-3-app-and-component

I basically imported the 'dayjs' package within the 'main.js' file itself, and then used '.provide' within the 'createApp' section at the bottom of the 'main.js' file to allow 'dayjs' to be known throughout the project accordingly.

<2023-05-01 Mon 15:51>: I tried the methods listed in that StackOverflow post above (https://stackoverflow.com/questions/66559331/how-to-properly-use-dayjs-inside-vue-3-app-and-component), but none of them seemed to really work.

I found a related GitHub repo post that basically shows you how to just add it as a new plugin in the 'plugins' folder with a few 'Object' related statements:
- https://github.com/Juceztp/vue-dayjs

With this in mind, I placed the following within the 'plugins/Dayjs.js' file:
#+begin_src js
import Vue from 'vue';
import dayjs from 'dayjs';

Object.defineProperties(Vue.prototype, {
    $date: {
        get() {
            return dayjs
        }
    }
});
#+end_src

<2023-05-01 Mon 16:01>: I tried implementing this idea, but received the '' error when doing so.

I then found this StackOverflow post on this topic:
- SyntaxError: ambiguous indirect export: default Error when importing my own class

Judging from some of the posts present, especially even the 'vue3' based plugin for 'dayjs' itself's advice (https://github.com/DevAccess/vue3-dayjs), I will probably just opt to use the 'provide/inject' method instead, related quote:
#+begin_src text
This plugin allows you to easily include Day.js globally. This is not recommended with Vue 3, and they recommend using provide/inject instead.
#+end_src

<2023-05-01 Mon 16:18>: I am still struggling with plugin injection, so I looked around, and found 'vue-moment' instead, so this might be a more sane approach to the simple problem of dealing with date timestamp issues:
- https://www.npmjs.com/package/vue-moment

With this in mind, I installed 'vue-moment' via the following NPM command:
#+begin_src bash
npm install vue-moment
#+end_src

<2023-05-01 Mon 16:26>: I found the original 'moment' NPM package, and opted to use this instead:
- https://www.npmjs.com/package/moment

I then installed it with this npm command:
#+begin_src bash
npm install moment
#+end_src

I then found a corresponding StackOverflow post on how to incorporate it into a Vue project, more specifically, the 'In your package.json in the "dependencies" section add moment:' answer provided by Pawel Gościcki
- https://stackoverflow.com/questions/34308004/moment-js-with-vuejs

<2023-05-01 Mon 16:38>: I looked deeper into the Moment.js docs, and its just a matter of calling 'moment()' and just playing around with the methods present, so I opted for this approach. Not sure why so many solutions around this library or even 'Day.js' are so complicated when Moment just takes care of this in such easier steps. However, good docs are hard to find sometimes, so this could have been improved upon instead of all this separate research to be honest.

<2023-05-08 Mon 07:03>: I did some research into a few ways to convert the given time calculations.

My general idea is to convert everything into seconds, countdown from that total amount, and just redisplay that amount as a loop goes on within the top display headers at the top of the application.

Here's a StackOverflow post I used as a small reference:
- https://stackoverflow.com/questions/37096367/how-to-convert-seconds-to-minutes-and-hours-in-javascript

Here's my gameplan of how I plan on solving the calculations for the countdown timer my way:
- Convert the 'hours', and 'minutes' that the user provides to seconds and add them to the 'seconds' amount
- This can be done by the following conversions:
#+begin_src js
// Hour to sec conversion:
let hrSecs = (hr / 1) * (3600 sec / 1 hr);

// Min to sec conversion:
let minSecs = (min / 1 ) * (60 sec / 1 min);

// Sec conversion:
let additionalSecs = secs;

let totalSecs = hrSecs + minSecs + additionalSecs;
#+end_src
- Then, create a while loop with a condition variable that checks to see if the overall sum result is greater than 0
- Within the while loop, decrease the 'counter' variable that is set to the 'sum' variable
- Within this while loop, continuously convert the 'sum' total second results to 'hours' by using:
#+begin_src js
let displayHrs = Math.floor (totalSecs / 3600);
#+end_src
- Within this while loop, continuously convert the 'sum' total second results to 'mins' by multiplying by using:
#+begin_src js
let displayMins = Math.floor(totalSecs % 3600 / 60)
#+end_src
- Within this while loop, continuously convert the 'sum' total second results to 'mins' by multiplying by using:
#+begin_src js
let displaySecs = Math.floor(totalSecs % 3600 % 60)
#+end_src
- Then, output these results within the output sections at the top of the app

<2023-05-08 Mon 08:12>: One major thing I forgot to accommodate for is the fact that this function needs to run once per second with 'setInterval'.

** Completed
*** DONE Git clone related 'Rails + Vue + Vite' template from GitHub and get it running locally
<2023-04-10 Mon 19:35>: I need to follow the instructions present within the related GitHub page:
- https://github.com/IsraelDCastro/rails-vite-tailwindcss-template

More specifically I need to implement this by using the following command:
#+begin_src bash
rails new my_app --skip-webpack-install --skip-javascript -d <database_you_want> -m https://raw.githubusercontent.com/IsraelDCastro/rails-vite-tailwindcss-template/master/template.rb --vue
#+end_src

<2023-04-11 Tue 18:57>: I used the following command which was the 'From GitHub with vue' command on the related README  for the main GitHub repo of the template itself (https://github.com/IsraelDCastro/rails-vite-tailwindcss-template):
#+begin_src bash
sam@notestation ~/hub/ClickClock $ rails new clickclock --skip-webpack-install --skip-javascript -d postgresql -m https://raw.githubusercontent.com/IsraelDCastro/rails-vite-tailwindcss-template/master/template.rb --vue
#+end_src

I then received the following error:
#+begin_src bash
/usr/share/rvm/gems/ruby-2.7.4/gems/ffi-1.15.5/lib/ffi/library.rb:145:in `block in ffi_lib': Could not open library 'vips.so.42': vips.so.42: cannot open shared object file: No such file or directory. (LoadError)
Could not open library 'libvips.so.42': libvips.so.42: cannot open shared object file: No such file or directory
#+end_src

I found this particular GitHub thread on the 'libvips' library with a very similar error, most people in this thread said it has deal with an issue of 'vips' not being installed (of which I have no idea what that is):
- https://github.com/libvips/ruby-vips/issues/219

I then tried to refer to the related 'libvips' GitHub README, and just flat out installed 'ruby-vips' via this command:
#+begin_src bash
sam@notestation ~/hub/ClickClock $ gem install ruby-vips
Successfully installed ruby-vips-2.1.4
Parsing documentation for ruby-vips-2.1.4
Installing ri documentation for ruby-vips-2.1.4
Done installing documentation for ruby-vips after 1 seconds
1 gem installed
#+end_src

I then tried the same command as before again but received the same error as before:
#+begin_src bash
sam@notestation ~/hub/ClickClock $ rails new clickclock --skip-webpack-install --skip-javascript -d postgresql -m https://raw.githubusercontent.com/IsraelDCastro/rails-vite-tailwindcss-template/master/template.rb --vue
#+end_src

<2023-04-11 Tue 19:21>: I then did more research and found this particular GitHub issues thread on the same error as shown above:
- https://github.com/loomio/loomio/issues/9492

Within that thread, one of the commenters said to literally install the affected dependency, so I tried to via this command:
#+begin_src bash
sam@notestation ~/hub/ClickClock $ sudo apt-get install libvips libvips-dev
#+end_src

I was able to then successfully be able to get the related command working without a problem:
#+begin_src bash
sam@notestation ~/hub/ClickClock $ rails new clickclock --skip-webpack-install --skip-javascript -d postgresql -m https://raw.githubusercontent.com/IsraelDCastro/rails-vite-tailwindcss-template/master/template.rb --vue
#+end_src

<2023-04-11 Tue 19:38>: I was able to run 'rails s' without an issue, so I would say this portion is complete. The next item is to actually check out Vue's related docs.
*** DONE Install Vue + Vite since they go hand in hand with each other to get the basic 'Hello World' app working in 'dev' mode
<2023-04-17 Mon 11:44>: After a bit of thinking on this topic, I realized that my previous route of hoping some random Rails template would work is kind of silly. Plus, it didn't even install the package.json needed for Vue so clearly something is messed up with that guy's project, and he didn't bother to reply to my GitHub isuses page bug report, so it's whatever. I need to move on anyway.

With this in mind, I tried using this particular video as a guide:
- Creating Your First Vue 3 App with Vite - A Beginner's Tutorial (https://www.youtube.com/watch?v=JLt3GrDZDvQ)

I also used the related 'Vite' docs in tandem:
- https://vitejs.dev/guide/

I used this command accordingly:
#+begin_src bash
npm create vite@latest
#+end_src

I then followed the prompts accordingly.

I then proceeded to do the following commands:
#+begin_src bash
npm install
npm run dev
#+end_src

<2023-04-17 Mon 11:50> With that in mind, I was able to get the 'Hello World' type Vue app to work as intended.
*** DONE Modify actual 'Hello World' Vue app to display a few other items so that I get the hang of actually editing the project
<2023-04-17 Mon 11:51>: I would like to figure out how to actually edit their 'Hello World' project so that I can figure out how to build more components for the application itself.

<2023-04-17 Mon 11:52>: As per the main homepage from the 'Hello World' app itself, it asked me to modify the 'components/HelloWorld.vue' file in order to modify it accordingly.

It seems like it does components in a similar way to how React does it, so it shouldn't take too much brain power to figure out how to add more components as I go along.

<2023-04-17 Mon 14:21>: I used the following video as a reference ontop of the existing Docs since I just wanted to add components as I went along and multiple 'Views' to add different pages. This guy basically uses Vue + Vite + Vue-Router, which is exactly what I'm using in my scenario:
- How to Setup a Basic Vite + Vue Project (+ Vue Router) 2022 (https://www.youtube.com/watch?v=PciUq6HcUNc)

I also used the 'Vue Router' docs as well:
- https://router.vuejs.org/installation.html

I used the following command to install version 4 of 'Vue-Router':
#+begin_src bash
npm install vue-router@4
#+end_src

I then proceeded to follow the guide, and overall, I got a working app with multiple 'views' for separate pages.

I was a bit confused on what was the difference between 'components' and 'views' for the Vue.js framework, but after a bit of research, I found this particular answer on StackOverflow which helped elucidate this process for me:
- https://stackoverflow.com/questions/50865828/what-is-the-difference-between-the-views-and-components-folders-in-a-vue-project

Basically, its just a matter of preference. From my understanding, you place the individual 'View' pages in the 'views' directory

*** DONE Record related command to run application in 'dev' mode
<2023-04-17 Mon 15:32>: Just wanted to include this for future reference, aka if you want to just run this application in 'dev' mode, just use the following command:
#+begin_src bash
npm run dev
#+end_src
*** DONE Work on creating a Figma wireframe for the application to plan out what I want on each component page
<2023-04-11 Tue 19:40>: I would like to revisit some basic Figma tutorials to get a good wireframe going for the application itself so I can plan out its features.

<2023-04-17 Mon 15:25>: This should be my next step as I really should be wireframing out the overall look and feel of the app.

Afterwards, I will translate it to Vue based components.

Once the basic components are then present, I can proceed with making flashy looking buttons, and looking into cool animations.

<2023-04-18 Tue 14:14>: I was able to watch this video to learn more of the basics of Figma, and honestly, it's not too hard. I think before when I tried using it, I was under pressure of trying to do that stupid test for that one shill ass job.

Most of these YouTubers in this realm are a bit grifty, but this video was good to learn the basics:
- Figma UI Design Tutorial: Get Started in Just 24 Minutes! (https://www.youtube.com/watch?v=FTFaQWZBqQ8)

Also, the only site that was worthwhile for icons with a related account was this one:
- https://freeicons.io/

Here's a useful site to obtain related Figma templats for reference to see what other people have done for mobile app designs:
- https://figmaresource.com/category/ui-kits/page/5/

Here was a cool Half Life themed one I found that had a really really cool looking center button I would love to replicate sometime:
- https://www.figma.com/file/oIAQW5RLtTgVqBAH73TeMi/Half-Life?node-id=30-3075&t=09r6OM5YsT0Cb84H-0

<2023-04-18 Tue 14:39>: Overall, the design is complete here:
- https://www.figma.com/file/45qGh4g17WCbewzEaZX70s/ClickClock-Figma-Template

I really like what I did so far and I think it's pretty good for what I did so far. Simple yet effective. Honestly, it looks good.

Now I have to figure out how to pull all of this out of Figma, and into an actual website that I can play with.
*** DONE Figure out a gameplan to translate Figma wireframe site components into actual useable Vue basd web components
<2023-04-18 Tue 14:41>: My next goal is to translate what I created for the wireframe and into an actual Vue app itself.

Related links I researched:
- This is a somewhat long-winded React centered tutorial on how to translate Figma components into a React component. Though it's useful, I really just need to export what I created into HTML components or at least buttons etc to be placed onto a page so I don't think this is the best route honestly at the moment:
- Figma To React JS | Build A Modern Responsive Website - Project Set Up (https://www.youtube.com/watch?v=zwj4x2q_HcE)

<2023-04-18 Tue 15:16>: After doing some research, most of what's present is just "Use this plugin" --> followed by "Oh wow, this plugin doesn't even translate the page correctly" / "Oh wow, it's not even letting me export the buttons as intended"

What's pretty ironic is that I might have to just go ahead and implement this by hand manually since there's no really easy way to do this...

You would think... for a tool like Figma that they didn't think to help facilitate the process of exporting the designs themselves into translatable web pages... It makes no sense to me why they have to piggyback off of rando 'plugin' creators...

Either way, I guess I have to make these components manually for now, but at least I have a very good sense of what I actually want to do.

What I will probably do in the truest sense / easiest route is to just make a literal mockup of the current design with div tags and buttons, scale it up to look close to what I planned, and go from there.

This beats having to figure out which plugin ACTUALLY works from Figma. I will admit though, it is a really nice tool but its exporting functionality is God awful though.

<2023-04-18 Tue 15:35>: The goal for the workflow going forward involves the following (if I do this all manually):
- Create a component for the top 30% half of the screen called 'TopFrame.vue'
- Create a component for the bottom 70% half of the screen called 'BottomFrame.vue'
- For each of these components, literally create rectangle based div tags that look similar to what is present on the Figma template which shouldn't be hard at all
- The buttons could easily be exported and brought into something else like GIMP to be further designed and chromed up so that 'hover' and 'click' actions are very obvious
- Once the design is actually present and each page is accessible, it's just a matter of literally rigging up each of the buttons to separate functions in the Vue components
- Once the buttons are actually working in their basic state, I can then explore various NPM packages that handle timers and metronome clicks as well as muting capabilities
- After that, the app should be pretty much done and ready for testing on multiple devices including mobile and desktop screens
- The only thing after that would include deploying it to something like Render.com

<2023-04-19 Wed 15:10>: My revised version of this workflow goes as follows:
- Create every individual component for the top half of the app minus the nav bar buttons at the top: even if it includes redundancy, this can be further refactored later so that if it works for now, great just use it and move on
- Figure out the basic CSS styling for each component so that it closely matches the actual wireframed app itself
- Create the individual buttons necessary for the bottom nav bar in GIMP or through CSS manipulation of the basic 'button' HTML tag itself
- Rig the individual buttons to related Vue functions and get it working with a basic console.log statement to prove they are useable
- Look into NPM packages that provide timer functionality (for counting up and down) as well as metronome and volume packages
- Make the individual buttons actually work to provide changes on screen
- Review related Vue basics and other Docs to see if there is anything advanced I can add to the application itself
- Test the resulting app in different screen sizes
- Create modified buttons using gold style pixel art
- Research flashy looking animations that appear when each component page is loaded
- Deploy the app on Render.com

<2023-04-19 Wed 15:15>: With this in mind, I am marking this task as complete
*** DONE Create every individual component for the top half of the app minus the nav bar buttons at the top: even if it includes redundancy, this can be further refactored later so that if it works for now, great just use it and move on
<2023-04-19 Wed 15:18>: This portion is complete as there are individual 'Vue' based 'views' present for each individual page.

This can be further refactored later so that each page is a template with some provided components that are passed in via props via however which way that Vue does it, but for now, it works and is good for now.
*** DONE Figure out the basic CSS styling for each component so that it closely matches the actual wireframed app itself
<2023-04-19 Wed 15:19>: I am slowly trying ot figure it out, but it has becoming a bit hard to really match the wireframe itself.

Again, I just wish Figma gave you the basics to work with, but alas, it isn't as good as Dreamweaver used to be in that respect.

My opinion aside, I will continue to just try to manipulate the CSS further to match it. The results are like 60% of the way there, but definitely need tweaking.

<2023-04-19 Wed 16:13>: I removed a lot of the CSS involved in the base Vue app, but am struggling with getting the height to actually cooperate with me.

I used the 'background-repeat' option to make the buttons appear with the specific flat icons.

I will do some more research as to why the CSS is acting so weird.

<2023-04-20 Thu 17:11>: I got really really close to the Figma template with must deliberation. I figured out the CSS styling IS available in Figma, so that helped a ton.

I found this particular font that matched my Figma design's font:
- https://fonts.google.com/specimen/Fredoka

I then used this Stack Overflow post as a reference for how to insert custom fonts into the CSS stylesheet for a Vue app itself:
- https://stackoverflow.com/questions/51516084/how-do-i-add-a-google-font-to-a-vuejs-component

<2023-04-20 Thu 17:23>: I am getting closer, but there is one big issue I see after making all of these custom buttons:
- Without related text in the middle of the button, the action of switching 'View' pages on the fly doesn't work.
- There is still a grey background for the buttons despite that not being present in the .png form of the buttons.
- I would need to figure out how to resize the title for each page accordingly for longer words, probably will do so with more of an 'id' specific approach for styling on words like 'Stopwatch' or 'Metronome'.
- I probably will need to borrow from MaterialUI just for the time input field to make it just nice by default.

Getting there though :)

<2023-04-21 Fri 13:12>: I did some manipulation, and basically, you don't even need a 'button' HTML tag for the 'router-link' tags from Vue anyway, so I just literally applied the same CSS styling as the previous buttons, and it works just fine.

I changed the title tags to be smaller whenever necessary for the 'Stopwatch' and 'Metronome' sections.

I also realized that I will actually need the top half of the app to display the output for the app itself because the bottom is used for input anyway and would be super jenky if I didn't make it too obvious.

With this in mind, I have a better sense that I probably should just use something like MaterialUI to make input fields just easier from the get-go. I found a project that combines Vue and Material UI here:
- https://www.creative-tim.com/vuematerial

I then installed the related 'vue-material' component with the following command:
#+begin_src bash
npm install vue-material --save
#+end_src

More specifically, I am borrowing from the related docs page example for the Metronome input form itself:
- https://www.creative-tim.com/vuematerial/components/form

I also found a great example to utilize just for the ideas for the 'Stopwatch' view itself:
- https://github.com/jinderbrar/Stopwatch-using-ReactJS-and-Material-UI

It was from this example that I realized that the very top portion of the app needs to accommodate the output of the app, while the bottom of the app allows the user to input whatever they would like.

<2023-04-21 Fri 13:19>: I looked more into this, and what sucks is that 'vue-material' does NOT support Vue 3, which I am using for my project.

With that in mind, I will have to probably resort to using Bootstrap or maybe even Tailwind.

<2023-04-21 Fri 13:21>: I did further research, and found the SAME exact issues in which even Bootstrap doesn't even support Vue 3:
- https://github.com/bootstrap-vue/bootstrap-vue-next

<2023-04-21 Fri 13:31>: Apparently, Tailwind DOES support Vue3, so I guess this is a reason to just flatout try Tailwind as well this time around. I literally only need like 2 separate input fields anyway, so it's worth a shot.

With this in mind, I went ahead and used the following commands to install Tailwind components:
#+begin_src bash
npm install tailwindcss@latest
npm install @headlessui/vue @heroicons/vue
#+end_src

<2023-04-21 Fri 13:39>: My next steps need to be to actually go over the related Tailwind docs in terms of how to add them to my existing Vue project:
- https://tailwindui.com/documentation#vue-installing-dependencies

I then need to actually pick a component and just put it into the project to see if it works:
- https://tailwindui.com/components
- https://tailwindui.com/components/application-ui/forms/input-groups

<2023-04-21 Fri 15:33>: Apparently, "Tailwind UI" is NOT free. With this in mind, I will have to do more research on their site's docs pages to get more info about input fields I could use from their component library:
- https://tailwindcss.com/

Here are two related links of prebuilt components to use in my app as well that are Tailwind related:
- https://tailwindcomponents.com/

<2023-04-21 Fri 16:08>: This looks like a good Tailwind CSS based input field for the Metronome 'view' page:
- https://tailwindcomponents.com/component/number-input-counter

<2023-04-21 Fri 16:39>: I incorporated the related example in the Metronome page:
- https://tailwindcomponents.com/component/number-input-counter

I will have to decide on how I want to handle the time input for the 'Stopwatch' and 'Timer' pages.

After that, I can finally rig up the buttons, and do further tasks along the workflow since the UI is looking almost what I want it to be at this point minus a few tweaks overall.

<2023-04-24 Mon 11:45>: I found this particular resource to use 'router-link' in conjunction with a button. You basically have to wrap the 'router-link' around the button itself, and use the 'to', 'custom', and 'v-slot' attributes for the 'router-link' section, and then use the '@click' and 'role' attributes for the button itself:
- https://codingbeautydev.com/blog/vue-router-link-button/

I then used these two links as references for using 'font-awesome' style icons for the HTML buttons as well since I think doing the buttons via pure CSS will achieve flashier, and easier to manage effects instead of having to manually create the same types of buttons by hand even using GIMP:
- https://www.w3schools.com/howto/howto_css_icon_buttons.asp
- https://fontawesome.com/

I also used this StackOverflow post to determine how to add the actual Font Awesome CSS based CDN stylesheet to the actual project itself:
- https://stackoverflow.com/questions/51314997/how-to-add-cdn-css-file-to-vue-cli-3-project

<2023-04-24 Mon 11:53>: I then used this reference page to be able to install the Font Awesome icons as well:
- https://fontawesome.com/docs/web/use-with/vue/

I then used this related NPM command to install the Font Awesome icons:
#+begin_src bash
npm i --save @fortawesome/fontawesome-svg-core
npm i --save @fortawesome/free-solid-svg-icons
npm i --save @fortawesome/free-regular-svg-icons
npm i --save @fortawesome/free-brands-svg-icons
npm i --save @fortawesome/vue-fontawesome@latest-3
#+end_src

I then found a desired icon here:
- https://fontawesome.com/icons/circle-info?f=classic&s=light

I then tried to use the following syntax within the page itself to try to use the icon itself within my Vue project:
#+begin_src js
<font-awesome-icon :icon="['fal', 'circle-info']" />
#+end_src

<2023-04-24 Mon 12:05>: After failing with the above HTML syntax itself, I then used this page as a reference to add the Font-Awesome library as a 'component' to the 'main.js' file itself in the project:
- https://fontawesome.com/docs/web/use-with/vue/add-icons

<2023-04-24 Mon 16:02>: I used this video as a reference guide on how to really actually use Font Awesome with Vue 3, and even though it was from 2 years ago, the premise was pretty muc hthe same:
- How to Add Font Awesome Icons in Vue 3 (https://www.youtube.com/watch?v=MoDIpTuRWfM)

<2023-04-24 Mon 16:44>: I used this guide as a reference on how to make glossy buttons:
- https://simplestepscode.com/css-glass-button-tutorial/#

I then found this StackOverflow post for a solution on how to center the button's CSS styling as well to use "display:flex; justify-content:center" on the parent button's CSS styling:
- https://stackoverflow.com/questions/61675732/vertically-center-font-awesome-icon-and-text-inside-an-a-tag-router-link

<2023-04-24 Mon 17:04>: I also figured out that you can change the icon color for a Font Awesome icon by just adding color changing properties to the class via this StackOverflow post:
- https://stackoverflow.com/questions/14474452/can-i-change-the-color-of-font-awesomes-cog-icon

<2023-04-24 Mon 17:15>: I then focused on the Tailwind CSS side of the styling issue for the "Metronome" page as I really need a nice looking input field to carry that page effectively.

I then installed the Tailwind CSS components by following this Vue + Vite + TailwindCSS related guide:
- https://www.codingthesmartway.com/how-to-use-tailwind-css-with-vue-and-vite/

I then used the following commands accordingly:
#+begin_src bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
#+end_src

I then added the following to the 'tailwind.config.js' file in the root directory:
#+begin_src js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
#+end_src

I then added the Tailwind directives to the 'style.css' stylesheet:
#+begin_src css
/* Adding Tailwind directives: */
@tailwind base;
@tailwind components;
@tailwind utilities;
#+end_src

I then ran the following command:
#+begin_src
sam@notestation ~/hub/ClickClock $ npx tailwindcss -i ./src/style.css -o ./dist/output.css --watch
#+end_src

<2023-04-24 Mon 17:41>: I had to restart the 'vterm' terminal running 'npm run dev' but after doing so, I was finally able to see the Tailwind CSS styling take place for the example I borrowed from 'TailwindComponents' site.

<2023-04-24 Mon 17:45>: I did realize that with every single CSS change now that the whole project is based upon Tailwind, I will always have to re-run the following command to reprocess the CSS accordingly:
#+begin_src bash
npx tailwindcss -i ./src/style.css -o ./dist/output.css --watch
#+end_src

With this in mind, I still have to re-adjust the header styling to slightly better match the Figma template.

I will also have to figure out how to rig the "Metronome" page's increment and decrement buttons accordingly to actually work to update the input field too since this is useful to give the user more of a choice in the matter of whatever button style they prefer.

Past that, I probably have to figure out a good styled input field for the 'Timer' and 'Stopwatch' component pages.

After that, I can finally rig up the buttons, and do the rest of the tasks for this project.

<2023-04-25 Tue 13:40>: I borrowed from this StackOverflow post to remove the default increment buttons:
- https://stackoverflow.com/questions/40690284/remove-increment-and-decrement-icon-from-input-field

I also used this MDN page as a reference for 'min' and 'max' attributes:
- https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number

<2023-04-25 Tue 14:52>: I used this StackOverflow post as a reference to make list item bulletpoints that are literally circle shapes which is kind of cool as well:
- https://stackoverflow.com/questions/23580181/how-can-i-draw-four-circles-in-single-div-element

I also borrowed the idea to make multiple red circles for a metronome app via this metronome app screenshot as well which makes sense to communicate the idea of time clicking away for a metronome on an app like this, specifically under the 'Tempo App Series' section:
- https://www.lindebladpiano.com/blog/best-metronome-apps

I plan on making each of the shapes change a different color as the click keeps happening in sequences of just 4/4 time since I just wanted to make a basic metronome.

<2023-04-25 Tue 15:57>: I'm trying to figure out how exactly I want to implement the input and output fields for both the "Stopwatch" and "Timer" sections of the app.

I found example apps that just are a stopwatch by default like this:
- https://reacttailwindstopwatch.netlify.app/

I also found Tailwind component libraries like "DaisyUI" that literally have 'Countdown' fields, but NOT 'Countup' fields which sucks because it's going to be super awkward to implement if I have it on one page but not the other:
- https://daisyui.com/components/countdown/
- https://daisyui.com/docs/install/

I also realized that the 'Stopwatch' portion doesn't even need an input field either.

<2023-04-25 Tue 16:12>: I did more research and found these three random similar examples:
- Coming Soon Page with Countdown Timer using Tailwind CSS & Alpine JS (https://www.youtube.com/watch?v=XsSp0X1lrEU)
- https://www.frontendmentor.io/solutions/countdown-timer-using-html-tailwind-css-and-some-javascript-EpjTileq5
- https://tailwindcomponents.com/component/countdown-timer

Their approach is to flat out display the 'Days', 'Hours', 'Minutes', and 'Seconds' into square blocks.

I can probably just do the same approach for my own application since I really only wanted to create a kitchen timer with 3 choices for 'hr' (hours), 'min' (minutes), and 'sec' (seconds).

I think the next approach I need to do is to create square input blocks with labels in a similar fashion for the 'Kitchen Timer' portion of my application.

<2023-04-25 Tue 16:17>: I found this particular Tailwind Docs page on the topic of 'box-sizing' that might be useful since I can just box up inputs accordingly in 2 digit boxes for hours, mins, and seconds which actually fits the paradigm of using time inputs anyway:
- https://tailwindcss.com/docs/box-sizing

<2023-04-25 Tue 16:34>: This app has really cool fonts, and might be worthwhile to borrow the vibe from:
- https://codepen.io/raphael_octau/pen/XxeqRJ

<2023-04-25 Tue 16:46>: I also found this particular StackOverflow post useful as a reference as this allows you to have multiple input fields on the same line:
- https://stackoverflow.com/questions/18470682/html-form-make-inputs-appear-on-the-same-line

However, I might borrow heavily from this particular example as this has multiple inputs on the same line as well:
- https://tailwindcomponents.com/component/countdown-timer

<2023-04-26 Wed 11:08>: I used the 'Box Sizing' docs page to apply a 'box' div from Tailwind around each input:
- https://tailwindcss.com/docs/box-sizing

I then used this StackOverflow example for the reminder to use 'display:block' for the 'input' and 'label' tag in a scenario like this where you want the label ABOVE the input tag:
- https://stackoverflow.com/questions/6046110/styling-form-with-label-above-inputs

I also referred to this Tailwind docs page for how to adjust the text sizing for the inputs as well:
- https://tailwindcss.com/docs/font-size

<2023-04-26 Wed 11:16>: I believe most of the latest styling changes now reflect the initial design template dictated by the Figma design template.

With this in mind, this task is complete.
** Cancelled
*** CANCELLED Ensure that the actual Vue.js related template actually installed Vue.js components
<2023-04-12 Wed 22:02>: Based on watching a few refresher videos on Vue.js, I realized that the template I'm using might not even be installing Vue.js correctly.

I went through the related process a few times but still noticed that only the '' directory contains anything Vue.js related.

I don't see any major 'package.json' manifest file for the project itself.

Here is the related GitHub issues bug I opened up for that template itself:
- https://github.com/IsraelDCastro/rails-vite-tailwindcss-template/issues/13

I might go ahead and just try with a basic Vue.js app going forward to be honest since this is really just a 3-part timer application anyway. I will think about this and debate this honestly.

<2023-04-17 Mon 11:42>: I went ahead and nuked the idea of having to learn Vue and to hook it up with Rails. It's way better to just use the tools that were meant for that framework, so I decided to forgo this and to just use Vue on its own with Vite and to get a Minimum Viable Product (MVP) going with a framework + wireframe before ever proceeding on anything else.
*** CANCELLED Create the individual buttons necessary for the bottom nav bar in GIMP or through CSS manipulation of the basic 'button' HTML tag itself
<2023-04-26 Wed 11:18>: I opted for designing the buttons via CSS as this allows for easier and more modern animations later. Though it is super fun to make glossy buttons, I think it's better to start with just pure CSS these days as HTML5/CSS3 allows for such easier effects for this kind of thing as opposed to the old days where you had to do these animations by hand.
